# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

user  {{ www_user }};
worker_processes  {{ ansible_processor_vcpus }};

error_log  /var/log/nginx/error.log;
#error_log  /var/log/nginx/error.log  notice;
#error_log  /var/log/nginx/error.log  info;

pid        /run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    client_max_body_size {{ nginx_client_max_body_size }};

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    index   index.html index.htm;

    upstream app_pepyatka {
      server {{ pepyatka_server_host }}:{{ pepyatka_server_port }};
    }

{% if server_cert is defined %}
    server {
      server_name    _;
      listen         80;
      server_name    {{ pepyatka_hostname }};
      return         301 https://$server_name$request_uri;
    }
{% endif %}

    server {
{% if server_cert is defined %}
      listen 443 ssl spdy;
      listen [::]:443 ssl spdy;
{% else %}
      listen 80;
{% endif %}
      server_name {{ pepyatka_hostname }};
      access_log /var/log/nginx/pepyatka.log main;

{% if pepyatka_frontend_scheme == "https" %}
      if ($http_x_forwarded_proto = 'http') {
         return 301 https://$server_name$request_uri;
      }
{% endif %}

      gzip on;
      gzip_comp_level 6;
      gzip_vary on;
      gzip_min_length  1000;
      gzip_proxied any;
      gzip_buffers 16 8k;

      gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

{% if server_cert is defined %}
      ssl on;
      ssl_certificate /etc/nginx/ssl/api.pepyatka.crt;
      ssl_certificate_key /etc/nginx/ssl/api.pepyatka.key;
{% endif %}

      location / {
        root /var/www/pepyatka-html/public;
        access_log off;
        expires max;
        try_files $uri $uri/ /index.html?/$request_uri;
      }

      # disable logging for some `common` files
      # Disable logging for favicon
      location = /favicon.ico {
        log_not_found off;
        access_log off;
      }

      # Disable logging for robots.txt
      location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
      }

      location /attachments/ {
        root {{ pepyatka_files_dir }};
        expires max;
        rewrite ^/attachments/(.*)$ /$1 break;
      }

      location /files/profilePictures/ {
        root {{ pepyatka_files_dir }};
        expires max;
        rewrite ^/files/(.*)$ /$1 break;
      }

{% if nginx_restrict_users_ip is defined %}
      location /v1/users {
        allow {{ nginx_restrict_users_ip }};
        allow 127.0.0.1;
        deny all;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header X-NginX-Proxy true;

        proxy_pass http://app_pepyatka;
        proxy_redirect off;
      }
{% endif %}

      location ~ ^/(v1/|v2/|socket.io/) {
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header X-NginX-Proxy true;

        proxy_pass http://app_pepyatka;
        proxy_redirect off;
      }
   }
}
