- name: Ensure /etc/freefeed
  become: yes
  file:
    path: /etc/freefeed
    state: directory

- name: Get config files
  become: yes
  aws_s3:
    bucket: freefeed-config
    object: "server/{{ item }}"
    dest: "/etc/freefeed/{{ item }}"
    mode: get
    overwrite: different
  loop:
    - "local-{{ freefeed_env }}.json"
    - "banlist.txt"
  when: freefeed_fetch_config_overrides_from_s3

- name: Pull docker image
  become: yes
  docker_image:
    name: "freefeed/freefeed-server:latest"
    source: pull
    state: present
    force_source: yes
  register: pull_docker_image

- name: Start redis container
  become: yes
  docker_container:
    name: redis
    image: "redis:latest"
    state: started
    restart_policy: on-failure
    networks:
      - name: freefeed

- name: Run DB migrations
  become: yes
  docker_container:
    name: "freefeed-db-migration"
    image: "freefeed/freefeed-server:{{ freefeed_server_version }}"
    command: "./node_modules/.bin/knex migrate:latest"
    detach: false
    volumes:
      - "/etc/freefeed/local-{{ freefeed_env }}.json:/server/config/local-{{ freefeed_env }}.json:ro"
      - /etc/freefeed/banlist.txt:/etc/freefeed/banlist.txt:ro
    env:
      NODE_ENV: production
      MONITOR_PREFIX: "{{ monitor_prefix }}"
      NODE_CONFIG_ENV: "{{ freefeed_env }}"
    networks:
      - name: freefeed
    state: started

- name: Ensure directory for logs
  become: yes
  file:
    path: /var/log/freefeed-server
    state: directory

- name: Start server containers
  become: yes
  docker_container:
    name: "freefeed-server-{{ item }}"
    image: "freefeed/freefeed-server:{{ freefeed_server_version }}"
    command: "yarn start"
    init: yes
    published_ports:
      - "{{ 2999 + item|int }}:3000"
    links:
      - redis:redis
    volumes:
      - "/etc/freefeed/local-{{ freefeed_env }}.json:/server/config/local-{{ freefeed_env }}.json:ro"
      - /etc/freefeed/banlist.txt:/etc/freefeed/banlist.txt:ro
      - /var/log/freefeed-server:/server/log
      - /root/.aws:/root/.aws:ro
    env:
      NODE_ENV: production
      MONITOR_PREFIX: "{{ monitor_prefix }}"
      NODE_CONFIG_ENV: "{{ freefeed_env }}"
      FRFS_PORT: "3000"
      AWS_SDK_LOAD_CONFIG: 'true'
      #DEBUG: '*,-babel*'
    networks:
      - name: freefeed
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost/v2/server-info"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    state: started
    restart_policy: on-failure
  with_sequence: count="{{ freefeed_server_instances }}"

- name: "Wait for FreeFeed server to come up"
  uri:
    url: "http://localhost:{{ 2999 + item|int }}/v2/server-info"
    status_code: 200
  register: result
  until: result.status == 200
  retries: 5
  delay: 1
  with_sequence: count="{{ freefeed_server_instances }}"

