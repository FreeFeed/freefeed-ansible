---

- fail: msg="Pepyatka server is only supported for Ubuntu"
  when: ansible_distribution != 'Ubuntu'

- name: Install required packages
  apt: name={{ item }} state=present
  with_items:
    - graphicsmagick
    - git
    - make
    - g++
  tags: pepyatka

- name: Create pepyatka user
  user:
    name: "{{ pepyatka_user }}"
    home: "{{ pepyatka_home_dir }}"
    createhome: yes
    system: yes
  tags: pepyatka

- name: Check if pepyatka-server repo already exists
  stat: path={{ pepyatka_home_dir }}/pepyatka-server/.git
  register: pepyatka_server_dir
  tags: pepyatka

- name: Initial deploy of pepyatka-server
  sudo: yes
  sudo_user: "{{ pepyatka_user }}"
  git:
    repo: "{{ pepyatka_server_repo }}"
    dest: "{{ pepyatka_home_dir }}/pepyatka-server"
    version: "{{ pepyatka_server_branch }}"
  register: pepyatka_server_init
  when: not pepyatka_server_dir.stat.exists
  tags: pepyatka

- name: Get pepyatka-server local version
  sudo: yes
  sudo_user: "{{ pepyatka_user }}"
  command: chdir={{ pepyatka_home_dir }}/pepyatka-server git rev-parse HEAD
  register: pepyatka_server_local_version
  tags: pepyatka

- name: Fetch pepyatka-server remote
  sudo: yes
  sudo_user: "{{ pepyatka_user }}"
  command: chdir={{ pepyatka_home_dir }}/pepyatka-server git fetch origin
  tags: pepyatka

- name: Get pepyatka-server version on remote
  sudo: yes
  sudo_user: "{{ pepyatka_user }}"
  command: chdir={{ pepyatka_home_dir }}/pepyatka-server git rev-parse origin/{{ pepyatka_server_branch }}
  register: pepyatka_server_remote_version
  tags: pepyatka

- name: Update pepyatka-server
  sudo: yes
  sudo_user: "{{ pepyatka_user }}"
  git:
    repo: "{{ pepyatka_server_repo }}"
    update: yes
    dest: "{{ pepyatka_home_dir }}/pepyatka-server"
    version: "{{ pepyatka_server_branch }}"
    force: yes
  when: pepyatka_server_local_version.stdout != pepyatka_server_remote_version.stdout
  register: pepyatka_server
  tags: pepyatka

- name: Save changelog in a file
  shell: echo "{{ pepyatka_server_local_version.stdout }}...{{ pepyatka_server_remote_version.stdout }}" > /tmp/pepyatka-server-changelog
  when: pepyatka_server_local_version.stdout != pepyatka_server_remote_version.stdout
  tags: pepyatka

- name: Fetch pepyatka-server changelog
  fetch:
    src=/tmp/pepyatka-server-changelog
    dest=pepyatka-server-changelog/{{ inventory_hostname }}
    flat=yes
  when: pepyatka_server_local_version.stdout != pepyatka_server_remote_version.stdout
  tags: pepyatka

- name: Deploy pepaytka config
  template:
    src: environment.js.j2
    dest: "{{ pepyatka_home_dir }}/pepyatka-server/config/environments/{{ pepyatka_node_env }}.js"
    owner: "{{ pepyatka_user }}"
    group: "{{ pepyatka_group }}"
  register: pepyatka_config
  tags: pepyatka

- name: Deploy reset password mail template
  template:
    src: resetPassword.ejs.j2
    dest: "{{ pepyatka_home_dir }}/pepyatka-server/app/scripts/views/mailer/resetPassword.ejs"
    owner: "{{ pepyatka_user }}"
    group: "{{ pepyatka_group }}"
  tags: pepyatka

- name: Deploy banlist.txt
  copy:
    content: "{{ pepyatka_banlist }}"
    dest: "{{ pepyatka_home_dir }}/pepyatka-server/config/banlist.txt"
    owner: "{{ pepyatka_user }}"
    group: "{{ pepyatka_group }}"
  register: pepyatka_banlist
  tags: pepyatka

- name: Create directories for attachments, thumbnails and profile pictures
  file:
    path: "{{ pepyatka_files_dir }}/{{ item }}"
    state: directory
    owner: "{{ pepyatka_user }}"
  with_items:
    - attachments/thumbnails
    - profilepics
  tags:
    - pepyatka

- name: Cleanup local node_modules
  file: path="{{ pepyatka_home_dir }}/pepyatka-server/node_modules" state=absent
  when: (pepyatka_server is defined and pepyatka_server.changed) or (pepyatka_server_init is defined and pepyatka_server_init.changed) or (pepyatka_config is defined and pepyatka_config.changed)
  tags: pepyatka

- name: Install pepyatka-server dependencies
  sudo: yes
  sudo_user: "{{ pepyatka_user }}"
  npm: path="{{ pepyatka_home_dir }}/pepyatka-server" state=latest
  tags: pepyatka

- name: Deploy upstart config files
  template: src=pepyatka.upstart.j2 dest=/etc/init/pepyatka-{{ item }}.conf
  with_items: pepyatka_server_instances
  register: upstart_config
  tags: pepyatka

- name: Deploy logrotate config for pepyatka instances
  template: src=logrotate.j2 dest=/etc/logrotate.d/pepyatka
  tags: pepyatka

- name: Start pepyatka-server instances
  service: name=pepyatka-{{ item }} state=started enabled=yes
  with_items: pepyatka_server_instances
  register: start_pepyatka
  tags: pepyatka

- name: Restart pepyatka-server instances
  service: name=pepyatka-{{ item }} state=restarted
  with_items: pepyatka_server_instances
  when: ((pepyatka_server is defined and pepyatka_server.changed) or (pepyatka_config is defined and pepyatka_config.changed) or (upstart_config is defined and upstart_config.changed) or (pepyatka_banlist is defined and pepyatka_banlist.changed)) and not start_pepyatka.changed
  tags: pepyatka

- name: Ensure pepyatka is up and running
  wait_for: host=localhost port={{ item }} timeout=30 state=started
  with_items: pepyatka_server_instances
  tags: pepyatka
